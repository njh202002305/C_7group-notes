10장 포인터
포인터란 메모리의 주소값을 저장하는 변수이다.
포인터 선언방법으로는
(포인터에 주소값이 저장되는 데이터의 형) * (포인터의 이름); 과 같이 정의할 수 있다. * 를 쓰는 이유는
우리가 앞서 & 연산자가 어떠한 데이터의 주소값을 얻어내는 연산자 였다면 반대로 해당 주소값에
대응되는 데이터를 가져오는 연산자가 필요해 * 를 그 연산자로 지정한 것이다. * 연산자는 곱셈 연산자와
모양이 같으므로 연산자와 피연산자를 구분하여 그 쓰임새를 구분하여야 한다.
포인터 변수의 크기는 주소값이 저장되는 데이터의 형으로 정해지는데  char 또는 double로 선언하여 4바이트
가 크기로 정해진다.
Q1)포인터에는 왜 타입이 필요한거죠?
만약 변수 a를 int a;와 같이 선언하고 포인터 p를 pointer *p;와 같이 선언한다면 p에 a의 주소값을 전달해준후
*p = 4; 라는 문장을 쓴다면 어떻게 될까? 포인터 p에는 변수 a의 주소값을 들어 있지만 이는 시작주소만
들어가 있기 때문에 컴퓨터 메모리에서 얼마만큼을 읽어들어야 할지 알 길이 없게된다. 따라서 포인터 p를
pointer *p; 와 같이 선언하지 말고 반드시 int *p처럼 데이터의 형식이 들어가야 한다.
포인터와 배열
포인터와 배열의 관계는 *p는 포인터 변수 p가 가리키는 곳에 들어있는 값을 의미하므로 a[0]과 의미가 같다.
따라서 *a와 a[0]은 같은 의미라는 것을 알 수 있다.
포인터와 배열명에서 증감 연산자를 활용할수도 있는데 p++은 포인터 p가 가리키는 곳의 다음 주소를 의미하고
*p++는 포인터 p가 가리키는 곳의 다음 주소 안데 들어 있는 값을 의미한다.

 
